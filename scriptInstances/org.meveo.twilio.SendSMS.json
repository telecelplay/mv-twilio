{
  "code" : "org.meveo.twilio.SendSMS",
  "inputs" : [ {
    "name" : "to",
    "type" : "String"
  } ],
  "outputs" : [ {
    "name" : "result",
    "type" : "String"
  } ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.twilio;\r\n\r\nimport java.util.Map;\r\nimport java.util.HashMap;\r\nimport java.util.Random;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.model.customEntities.OutboundSMS;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.json.*;\r\nimport javax.ws.rs.client.*;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport javax.ws.rs.core.*;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.credentials.CredentialHelperService;\r\nimport org.glassfish.jersey.client.authentication.HttpAuthenticationFeature;\r\n\r\npublic class SendSMS extends Script {\r\n\r\n    private String to;\r\n\r\n    private String result;\r\n\r\n    public String getResult() {\r\n        return result;\r\n    }\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(SendSMS.class);\r\n\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n  \r\n  \r\n\tstatic final private String TWILIO_URL = \"api.twilio.com\";\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n\t\tCredential credential  = CredentialHelperService.getCredential(TWILIO_URL,crossStorageApi,defaultRepo);\r\n      \tif(credential==null){\r\n        \tthrow new BusinessException(\"No credential found for \"+TWILIO_URL);\r\n      \t} else {\r\n        \tlog.info(\"using credential {} with username {}\",credential.getUuid(),credential.getUsername());\r\n      \t}\r\n        String TWILIO_SID = credential.getPassword();\r\n        String TWILIO_API_KEY = credential.getApiKey();\r\n        String TWILIO_MESSAGE_ID = credential.getToken();\r\n        String url = \"https://api.twilio.com/2010-04-01/Accounts/\"+TWILIO_SID+\"/Messages.json\";\r\n        Random rnd = new Random();\r\n        int number = rnd.nextInt(999999);\r\n        String message = Integer.toString(number);\r\n        Form map = new Form().param(\"To\", to).param(\"MessagingServiceSid\", TWILIO_MESSAGE_ID).param(\"Body\", message).param(\"From\", \"+12546138615\");\r\n        HttpAuthenticationFeature feature = HttpAuthenticationFeature.basicBuilder().nonPreemptive().credentials(TWILIO_SID, TWILIO_API_KEY).build();\r\n        Client client = ClientBuilder.newClient();\r\n        client.register(feature);\r\n        WebTarget target = client.target(url);\r\n        OutboundSMS record = new OutboundSMS();\r\n        Response response = null;\r\n        try {\r\n            response = target.request().post(Entity.form(map), Response.class);\r\n            log.info(\"Response: {}\", response);\r\n        } catch (Exception ex) {\r\n            log.error(\"error while hitting  twilio url :{}\", ex.getMessage());\r\n            throw new BusinessException(\"Something went wrong.Please try after sometime\");\r\n        }\r\n        String value = response.readEntity(String.class);\r\n        JSONObject json = new JSONObject(value);\r\n        if (!json.getString(\"status\").equalsIgnoreCase(\"accepted\")) {\r\n            result = json.getString(\"message\");\r\n        }\r\n        if (json.getString(\"status\").equalsIgnoreCase(\"accepted\")) {\r\n            log.info(\"Value : {}\", value);\r\n            result = json.getString(\"status\");\r\n            record.setTo(to);\r\n            record.setMessage(message);\r\n            record.setResponse(result);\r\n            try {\r\n                crossStorageApi.createOrUpdate(defaultRepo, record);\r\n            } catch (Exception ex) {\r\n                log.error(\"error updating twilio record :{}\", ex.getMessage());\r\n            }\r\n        }\r\n        super.execute(parameters);\r\n    }\r\n\r\n    public void setTo(String to) {\r\n        this.to = to;\r\n    }\r\n}\r\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ {
    "groupId" : "org.glassfish.jersey.bundles",
    "artifactId" : "jaxrs-ri",
    "version" : "2.17",
    "coordinates" : "org.glassfish.jersey.bundles:jaxrs-ri:2.17"
  } ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.credentials.CredentialHelperService",
    "description" : "Helper function to build request with credentials",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.credentials;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport javax.ws.rs.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.elresolver.ValueExpressionWrapper;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CredentialHelperService extends Script {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\r\n\r\n    public static class LoggingFilter implements ClientRequestFilter {\r\n        @Override\r\n        public void filter(ClientRequestContext requestContext) throws IOException {\r\n            if(requestContext!=null){\r\n              if(requestContext.getEntity()!=null){\r\n                log.info(requestContext.getEntity().toString());\r\n              } else {\r\n                log.info(\"uri:{}\",requestContext.getUri());\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Credential getCredential(String domain,CrossStorageApi crossStorageApiInstance,Repository repo){\r\n      List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,Credential credential) throws BusinessException {\r\n      String headerKey = credential.getHeaderKey();\r\n      String headerValue = credential.getHeaderValue();\r\n      try{\r\n        if(headerKey.contains(\"#{\")){\r\n          headerKey=ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey,\"entity\",credential);\r\n        }\r\n        if(headerValue.contains(\"#{\")){\r\n          headerValue=ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue,\"entity\",credential);\r\n        }\r\n      } catch(Exception e) {\r\n        throw new BusinessException(e);\r\n      }\r\n      return invocBuilder.header(headerKey, headerValue);\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n    }\r\n\t\r\n}",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}