{
  "code" : "org.meveo.twilio.SendOtp",
  "description" : "Send Otp code by SMS",
  "inputs" : [ {
    "name" : "to",
    "type" : "String"
  } ],
  "outputs" : [ {
    "name" : "result",
    "type" : "String"
  } ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.twilio;\n\nimport java.util.Map;\nimport java.util.List;\nimport java.util.HashMap;\nimport java.util.Random;\nimport java.time.Instant;\nimport java.time.Duration;\nimport javax.ws.rs.client.*;\nimport javax.ws.rs.core.*;\n\nimport org.meveo.admin.exception.BusinessException;\nimport org.meveo.api.persistence.CrossStorageApi;\nimport org.meveo.commons.utils.ParamBean;\nimport org.meveo.commons.utils.ParamBeanFactory;\nimport org.meveo.credentials.CredentialHelperService;\nimport org.meveo.model.customEntities.Credential;\nimport org.meveo.model.customEntities.OutboundSMS;\nimport org.meveo.model.persistence.CEIUtils;\nimport org.meveo.model.storage.Repository;\nimport org.meveo.service.script.Script;\nimport org.meveo.service.storage.RepositoryService;\n\nimport org.slf4j.LoggerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.google.gson.*;\n\npublic class SendOtp extends Script {\n    private static final Logger LOG = LoggerFactory.getLogger(SendOtp.class);\n    private static final String TWILIO_URL = \"api.twilio.com\";\n\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\n    private ParamBeanFactory paramBeanFactory = getCDIBean(ParamBeanFactory.class);\n    private ParamBean config = paramBeanFactory.getInstance();\n\n    private String retryDelay = config.getProperty(\"otp.retry.delay\", \"30\");\n    private String retryLimit = config.getProperty(\"otp.retry.limit\", \"5\");\n    private String otpAppName = config.getProperty(\"otp.app.name\", \"Telecel\");\n    private String otpMessage = config\n            .getProperty(\"otp.message.format\", \"Your %s verification code is: %s\");\n    private Duration retryTimeLimit = Duration.ofSeconds(Long.parseLong(retryDelay));\n    private int retryLimitPerDay = Integer.parseInt(retryLimit, 10);\n\n    private String to;\n    private String result;\n\n    public String getResult() {\n        return result;\n    }\n\n    public void setTo(String to) {\n        this.to = to;\n    }\n\n    @Override\n    public void execute(Map<String, Object> parameters) throws BusinessException {\n        List<OutboundSMS> lastSMSList = crossStorageApi.find(defaultRepo, OutboundSMS.class)\n                .by(\"to\", to)\n                .by(\"purpose\", \"OTP\")\n                .by(\"fromRange creationDate\", Instant.now())\n                .orderBy(\"creationDate\", false) // newest to oldest\n                .getResults();\n\n        if (lastSMSList != null && lastSMSList.size() > 0) {\n            OutboundSMS lastSMS = lastSMSList.get(0);\n            Duration lastRetry = Duration.between(lastSMS.getCreationDate(), Instant.now());\n            if (lastRetry.compareTo(retryTimeLimit) < 0) {\n                result = \"retry_later\";\n                return;\n            }\n            if (lastSMSList.size() > retryLimitPerDay) {\n                result = \"too_many_requests\";\n                return;\n            }\n        }\n        Credential credential =\n                CredentialHelperService.getCredential(TWILIO_URL, crossStorageApi, defaultRepo);\n        if (credential == null) {\n            LOG.error(\"No credential found for \" + TWILIO_URL);\n            result = \"server_error\";\n            return;\n        } else {\n            LOG.info(\"using credential {} with username {}\", credential.getUuid(),\n                    credential.getUsername());\n        }\n        String TWILIO_SID = credential.getUsername();\n        String TWILIO_MESSAGE_ID = credential.getToken();\n        String TWILIO_PHONE_NUMBER = credential.getRefreshToken();\n        String from = TWILIO_PHONE_NUMBER;\n        if (from == null || from.isEmpty()) {\n            from = TWILIO_MESSAGE_ID;\n        }\n\n        String url = \"https://api.twilio.com/2010-04-01/Accounts/\" + TWILIO_SID + \"/Messages.json\";\n        Random rnd = new Random();\n        String otp = String.format(\"%06d\", rnd.nextInt(999999));\n        String message = String.format(otpMessage, otpAppName, otp);\n        Form map = new Form().param(\"to\", to).param(\"from\", from).param(\"body\", message);\n        Client client = ClientBuilder.newClient();\n        WebTarget target = client.target(url);\n        OutboundSMS outboundSMS = new OutboundSMS();\n        Response response = null;\n        try {\n            response = CredentialHelperService\n                    .setCredential(target.request(), credential)\n                    .post(Entity.form(map), Response.class);\n            LOG.info(\"Response : {}\", response);\n        } catch (Exception e) {\n            LOG.error(\"error while hitting  twilio url :{}\", e);\n            result = \"server_error\";\n            return;\n        }\n        String value = response.readEntity(String.class);\n        LOG.info(\"response: {}\", value);\n        JsonObject json = new Gson().fromJson(value, JsonObject.class);\n        result = json.get(\"status\").getAsString();\n        if (\"accepted\".equalsIgnoreCase(result)) {\n            LOG.info(\"Value : {}\", value);\n            outboundSMS.setCreationDate(Instant.now());\n            outboundSMS.setPurpose(\"OTP\");\n            outboundSMS.setOtpCode(otp);\n            outboundSMS.setTo(to);\n            outboundSMS.setMessage(message);\n            outboundSMS.setResponse(result);\n            try {\n                crossStorageApi.createOrUpdate(defaultRepo, outboundSMS);\n            } catch (Exception e) {\n                LOG.error(\"error updating outboundSMS CEI: {}\", e);\n                result = \"server_error\";\n            }\n        }\n    }\n}\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.credentials.CredentialHelperService",
    "description" : "Helper function to build request with credentials",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.credentials;\n\nimport java.util.Map;\n\nimport org.meveo.service.script.Script;\nimport org.meveo.admin.exception.BusinessException;\nimport javax.ws.rs.client.*;\n\nimport java.io.IOException;\nimport java.util.List;\nimport org.meveo.model.customEntities.Credential;\nimport org.meveo.model.storage.Repository;\nimport org.meveo.api.persistence.CrossStorageApi;\nimport org.meveo.elresolver.ValueExpressionWrapper;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class CredentialHelperService extends Script {\n\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\n\n  public static class LoggingFilter implements ClientRequestFilter {\n    @Override\n    public void filter(ClientRequestContext requestContext) throws IOException {\n      if (requestContext != null) {\n        if (requestContext.getEntity() != null) {\n          log.info(requestContext.getEntity().toString());\n        } else {\n          log.info(\"uri:{}\", requestContext.getUri());\n        }\n      }\n    }\n  }\n\n  public static Credential getCredential(String domain, CrossStorageApi crossStorageApiInstance,\n      Repository repo) {\n    List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\n        .by(\"domainName\", domain)\n        .getResults();\n    if (matchigCredentials.size() > 0) {\n      return matchigCredentials.get(0);\n    } else {\n      return null;\n    }\n  }\n\n  public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,\n      Credential credential) throws BusinessException {\n    String headerKey = credential.getHeaderKey();\n    String headerValue = credential.getHeaderValue();\n    try {\n      if (headerKey != null && headerKey.contains(\"#{\")) {\n        headerKey =\n            ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey, \"entity\", credential);\n      }\n      if (headerValue != null && headerValue.contains(\"#{\")) {\n        headerValue =\n            ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue, \"entity\", credential);\n      }\n    } catch (Exception e) {\n      throw new BusinessException(e);\n    }\n    return invocBuilder.header(headerKey, headerValue);\n  }\n\n  @Override\n  public void execute(Map<String, Object> parameters) throws BusinessException {}\n\n}\n",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}