{
  "code" : "org.meveo.twilio.SendOtp",
  "description" : "Send Otp code by SMS",
  "inputs" : [ {
    "name" : "to",
    "type" : "String"
  } ],
  "outputs" : [ {
    "name" : "result",
    "type" : "String"
  } ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.twilio;\n\nimport java.util.Map;\nimport java.util.List;\nimport java.util.HashMap;\nimport java.util.Random;\nimport java.time.Instant;\nimport java.time.Duration;\nimport javax.ws.rs.client.*;\nimport javax.ws.rs.core.*;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\nimport javax.xml.bind.DatatypeConverter;\n\nimport org.meveo.admin.exception.BusinessException;\nimport org.meveo.api.persistence.CrossStorageApi;\nimport org.meveo.commons.utils.ParamBean;\nimport org.meveo.commons.utils.ParamBeanFactory;\nimport org.meveo.credentials.CredentialHelperService;\nimport org.meveo.model.customEntities.Credential;\nimport org.meveo.model.customEntities.OutboundSMS;\nimport org.meveo.model.persistence.CEIUtils;\nimport org.meveo.model.storage.Repository;\nimport org.meveo.service.script.Script;\nimport org.meveo.service.storage.RepositoryService;\n\nimport org.slf4j.LoggerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.google.gson.*;\n\npublic class SendOtp extends Script {\n    private static final Logger LOG = LoggerFactory.getLogger(SendOtp.class);\n    private static final String TWILIO_URL = \"api.twilio.com\";\n\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\n    private ParamBeanFactory paramBeanFactory = getCDIBean(ParamBeanFactory.class);\n    private ParamBean config = paramBeanFactory.getInstance();\n\n    private String retryDelay = config.getProperty(\"otp.retry.delay\", \"30\");\n    private String retryLimit = config.getProperty(\"otp.retry.limit\", \"5\");\n    private String otpAppName = config.getProperty(\"otp.app.name\", \"Telecel\");\n    private String otpMessage = config\n            .getProperty(\"otp.message.format\", \"Your %s verification code is: %s\");\n    private Duration retryTimeLimit = Duration.ofSeconds(Long.parseLong(retryDelay));\n    private int retryLimitPerDay = Integer.parseInt(retryLimit, 10);\n\n    private String to;\n    private String result;\n\n    public String getResult() {\n        return result;\n    }\n\n    public void setTo(String to) {\n        this.to = to;\n    }\n\n    @Override\n    public void execute(Map<String, Object> parameters) throws BusinessException {\n        List<OutboundSMS> lastSMSList = crossStorageApi.find(defaultRepo, OutboundSMS.class)\n                .by(\"to\", to)\n                .by(\"purpose\", \"OTP\")\n                .by(\"fromRange creationDate\", Instant.now())\n                .orderBy(\"creationDate\", false) // newest to oldest\n                .getResults();\n\n        if (lastSMSList != null && lastSMSList.size() > 0) {\n            OutboundSMS lastSMS = lastSMSList.get(0);\n            Duration lastRetry = Duration.between(lastSMS.getCreationDate(), Instant.now());\n            if (lastRetry.compareTo(retryTimeLimit) < 0) {\n                result = \"retry_later\";\n                return;\n            }\n            if (lastSMSList.size() > retryLimitPerDay) {\n                result = \"too_many_requests\";\n                return;\n            }\n        }\n        Credential credential =\n                CredentialHelperService.getCredential(TWILIO_URL, crossStorageApi, defaultRepo);\n        if (credential == null) {\n            LOG.error(\"No credential found for \" + TWILIO_URL);\n            result = \"server_error\";\n            return;\n        } else {\n            LOG.debug(\"using credential {} with username {}\", credential.getUuid(),\n                    credential.getUsername());\n        }\n        String TWILIO_SID = credential.getUsername();\n        String TWILIO_TOKEN = credential.getToken();\n        String TWILIO_PHONE_NUMBER = credential.getRefreshToken();\n\n        String url = \"https://api.twilio.com/2010-04-01/Accounts/\" + TWILIO_SID + \"/Messages.json\";\n        Random rnd = new Random();\n        String otp = String.format(\"%06d\", rnd.nextInt(999999));\n        String message = String.format(otpMessage, otpAppName, otp);\n        LOG.debug(\"Sending OTP {} to {}\", otp, to);\n        Form map = new Form()\n                .param(\"To\", to)\n                .param(\"From\", TWILIO_PHONE_NUMBER)\n                .param(\"Body\", message);\n        OutboundSMS outboundSMS = new OutboundSMS();\n        String response = null;\n        try {\n            response = ClientBuilder.newClient()\n                    .target(url)\n                    .request(MediaType.APPLICATION_FORM_URLENCODED)\n                    .header(\"Authorization\", \"Basic \" + DatatypeConverter.printBase64Binary(\n                            (TWILIO_SID + \":\" + TWILIO_TOKEN).getBytes(StandardCharsets.UTF_8)))\n                    .post(Entity.form(map), Response.class)\n                    .readEntity(String.class);\n        } catch (Exception e) {\n            LOG.error(\"Sending SMS via Twilio failed: {}\", e);\n            result = \"server_error\";\n            return;\n        }\n        LOG.debug(\"response: {}\", response);\n        JsonObject json = new Gson().fromJson(response, JsonObject.class);\n        String messageId = json.get(\"sid\").getAsString();\n        result = json.get(\"status\").getAsString();\n        LOG.debug(\"result: {}\", result);\n        if (messageId != null && !messageId.isEmpty()) {\n            outboundSMS.setCreationDate(Instant.now());\n            outboundSMS.setPurpose(\"OTP\");\n            outboundSMS.setOtpCode(otp);\n            outboundSMS.setTo(to);\n            outboundSMS.setMessage(message);\n            outboundSMS.setResponse(result);\n            LOG.debug(\"Saving outboundSMS {}\", outboundSMS);\n            try {\n                crossStorageApi.createOrUpdate(defaultRepo, outboundSMS);\n            } catch (Exception e) {\n                LOG.error(\"error updating outboundSMS CEI: {}\", e);\n                result = \"server_error\";\n            }\n        } else {\n            LOG.error(\"Sending SMS via Twilio failed: {}\", response);\n            result = \"server_error\";\n        }\n    }\n}\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.credentials.CredentialHelperService",
    "description" : "Helper function to build request with credentials",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.credentials;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport javax.ws.rs.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.elresolver.ValueExpressionWrapper;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CredentialHelperService extends Script {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\r\n\r\n    public static class LoggingFilter implements ClientRequestFilter {\r\n        @Override\r\n        public void filter(ClientRequestContext requestContext) throws IOException {\r\n            if(requestContext!=null){\r\n              if(requestContext.getEntity()!=null){\r\n                log.info(requestContext.getEntity().toString());\r\n              } else {\r\n                log.info(\"uri:{}\",requestContext.getUri());\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Credential getCredential(String domain,CrossStorageApi crossStorageApiInstance,Repository repo){\r\n      List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,Credential credential) throws BusinessException {\r\n      String headerKey = credential.getHeaderKey();\r\n      String headerValue = credential.getHeaderValue();\r\n      try{\r\n        if(headerKey.contains(\"#{\")){\r\n          headerKey=ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey,\"entity\",credential);\r\n        }\r\n        if(headerValue.contains(\"#{\")){\r\n          headerValue=ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue,\"entity\",credential);\r\n        }\r\n      } catch(Exception e) {\r\n        throw new BusinessException(e);\r\n      }\r\n      return invocBuilder.header(headerKey, headerValue);\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n    }\r\n\t\r\n}",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}