{
  "code" : "org.meveo.twilio.SendOtp",
  "description" : "Send Otp code by SMS",
  "inputs" : [ {
    "name" : "to",
    "type" : "String"
  } ],
  "outputs" : [ {
    "name" : "result",
    "type" : "String"
  } ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.twilio;\r\n\r\nimport java.util.Map;\r\nimport java.util.List;\r\nimport java.util.HashMap;\r\nimport java.util.Random;\r\nimport java.time.Instant;\r\nimport java.time.Duration;\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport java.io.IOException;\r\nimport java.io.UnsupportedEncodingException;\r\nimport javax.xml.bind.DatatypeConverter;\r\n\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.commons.utils.ParamBean;\r\nimport org.meveo.commons.utils.ParamBeanFactory;\r\nimport org.meveo.credentials.CredentialHelperService;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.customEntities.OutboundSMS;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.service.storage.RepositoryService;\r\n\r\nimport org.slf4j.LoggerFactory;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport com.google.gson.*;\r\n\r\npublic class SendOtp extends Script {\r\n    private static final Logger LOG = LoggerFactory.getLogger(SendOtp.class);\r\n    private static final String TWILIO_URL = \"api.twilio.com\";\r\n\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n    private ParamBeanFactory paramBeanFactory = getCDIBean(ParamBeanFactory.class);\r\n    private ParamBean config = paramBeanFactory.getInstance();\r\n\r\n    private String retryDelay = config.getProperty(\"otp.retry.delay\", \"30\");\r\n    private String retryLimit = config.getProperty(\"otp.retry.limit\", \"5\");\r\n    private String otpAppName = config.getProperty(\"otp.app.name\", \"Telecel\");\r\n    private String otpMessage = config\r\n            .getProperty(\"otp.message.format\", \"Your %s verification code is: %s\");\r\n    private Duration retryTimeLimit = Duration.ofSeconds(Long.parseLong(retryDelay));\r\n    private int retryLimitPerDay = Integer.parseInt(retryLimit, 10);\r\n\r\n    private String to;\r\n    private String result;\r\n\r\n    public String getResult() {\r\n        return result;\r\n    }\r\n\r\n    public void setTo(String to) {\r\n        this.to = to;\r\n    }\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        List<OutboundSMS> lastSMSList = crossStorageApi.find(defaultRepo, OutboundSMS.class)\r\n                .by(\"to\", to)\r\n                .by(\"purpose\", \"OTP\")\r\n                .by(\"fromRange creationDate\", Instant.now())\r\n                .orderBy(\"creationDate\", false) // newest to oldest\r\n                .getResults();\r\n\r\n        if (lastSMSList != null && lastSMSList.size() > 0) {\r\n            OutboundSMS lastSMS = lastSMSList.get(0);\r\n            Duration lastRetry = Duration.between(lastSMS.getCreationDate(), Instant.now());\r\n            if (lastRetry.compareTo(retryTimeLimit) < 0) {\r\n                result = \"retry_later\";\r\n                return;\r\n            }\r\n            if (lastSMSList.size() > retryLimitPerDay) {\r\n                result = \"too_many_requests\";\r\n                return;\r\n            }\r\n        }\r\n        Credential credential =\r\n                CredentialHelperService.getCredential(TWILIO_URL, crossStorageApi, defaultRepo);\r\n        if (credential == null) {\r\n            LOG.error(\"No credential found for \" + TWILIO_URL);\r\n            result = \"server_error\";\r\n            return;\r\n        } else {\r\n            LOG.info(\"using credential {} with username {}\", credential.getUuid(),\r\n                    credential.getUsername());\r\n        }\r\n        String TWILIO_SID = credential.getUsername();\r\n        String TWILIO_TOKEN = credential.getToken();\r\n        String TWILIO_PHONE_NUMBER = credential.getRefreshToken();\r\n\r\n        String url = \"https://api.twilio.com/2010-04-01/Accounts/\" + TWILIO_SID + \"/Messages.json\";\r\n        Random rnd = new Random();\r\n        String otp = String.format(\"%06d\", rnd.nextInt(999999));\r\n        String message = String.format(otpMessage, otpAppName, otp);\r\n        Form map = new Form()\r\n                .param(\"to\", to)\r\n                .param(\"from\", TWILIO_PHONE_NUMBER)\r\n                .param(\"body\", message);\r\n        Client client = ClientBuilder.newClient();\r\n        WebTarget target = client.target(url);\r\n        OutboundSMS outboundSMS = new OutboundSMS();\r\n        Response response = null;\r\n        try {\r\n            response = ClientBuilder.newClient()\r\n                    .target(url)\r\n                    .request(MediaType.APPLICATION_FORM_URLENCODED)\r\n                    .header(\"Authorization\", \"Basic \" + DatatypeConverter.printBase64Binary(\r\n                            (TWILIO_SID + \":\" + TWILIO_TOKEN).getBytes(\"UTF-8\")))\r\n                    .post(Entity.form(map), Response.class);\r\n\r\n            LOG.info(\"Response : {}\", response);\r\n        } catch (Exception e) {\r\n            LOG.error(\"Sending SMS via Twilio failed: {}\", e);\r\n            result = \"server_error\";\r\n            return;\r\n        }\r\n        String value = response.readEntity(String.class);\r\n        LOG.info(\"response: {}\", value);\r\n        JsonObject json = new Gson().fromJson(value, JsonObject.class);\r\n        result = json.get(\"status\").getAsString();\r\n        if (\"accepted\".equalsIgnoreCase(result)) {\r\n            LOG.info(\"Value : {}\", value);\r\n            outboundSMS.setCreationDate(Instant.now());\r\n            outboundSMS.setPurpose(\"OTP\");\r\n            outboundSMS.setOtpCode(otp);\r\n            outboundSMS.setTo(to);\r\n            outboundSMS.setMessage(message);\r\n            outboundSMS.setResponse(result);\r\n            try {\r\n                crossStorageApi.createOrUpdate(defaultRepo, outboundSMS);\r\n            } catch (Exception e) {\r\n                LOG.error(\"error updating outboundSMS CEI: {}\", e);\r\n                result = \"server_error\";\r\n            }\r\n        }\r\n    }\r\n}\r\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.credentials.CredentialHelperService",
    "description" : "Helper function to build request with credentials",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.credentials;\n\nimport java.util.Map;\n\nimport org.meveo.service.script.Script;\nimport org.meveo.admin.exception.BusinessException;\nimport javax.ws.rs.client.*;\n\nimport java.io.IOException;\nimport java.util.List;\nimport org.meveo.model.customEntities.Credential;\nimport org.meveo.model.storage.Repository;\nimport org.meveo.api.persistence.CrossStorageApi;\nimport org.meveo.elresolver.ValueExpressionWrapper;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class CredentialHelperService extends Script {\n\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\n\n  public static class LoggingFilter implements ClientRequestFilter {\n    @Override\n    public void filter(ClientRequestContext requestContext) throws IOException {\n      if (requestContext != null) {\n        if (requestContext.getEntity() != null) {\n          log.info(requestContext.getEntity().toString());\n        } else {\n          log.info(\"uri:{}\", requestContext.getUri());\n        }\n      }\n    }\n  }\n\n  public static Credential getCredential(String domain, CrossStorageApi crossStorageApiInstance,\n      Repository repo) {\n    List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\n        .by(\"domainName\", domain)\n        .getResults();\n    if (matchigCredentials.size() > 0) {\n      return matchigCredentials.get(0);\n    } else {\n      return null;\n    }\n  }\n\n  public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,\n      Credential credential) throws BusinessException {\n    String headerKey = credential.getHeaderKey();\n    String headerValue = credential.getHeaderValue();\n    try {\n      if (headerKey != null && headerKey.contains(\"#{\")) {\n        headerKey =\n            ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey, \"entity\", credential);\n      }\n      if (headerValue != null && headerValue.contains(\"#{\")) {\n        headerValue =\n            ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue, \"entity\", credential);\n      }\n    } catch (Exception e) {\n      throw new BusinessException(e);\n    }\n    return invocBuilder.header(headerKey, headerValue);\n  }\n\n  @Override\n  public void execute(Map<String, Object> parameters) throws BusinessException {}\n\n}\n",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}